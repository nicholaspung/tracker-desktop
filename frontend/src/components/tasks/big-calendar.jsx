import { useState } from 'react';
import { Button, Icon } from '@cloudscape-design/components';
import { WEEK_OPTIONS } from '../../lib/tasks/tasks';
import useMyStore from '../../store/useStore';
import CalendarDay from './calendar-day';
import { getCompletionPercentage } from '../../utils/tasks/daily';

/**
 * UI generated by v0.dev
 */

const months = [
  'January',
  'February',
  'March',
  'April',
  'May',
  'June',
  'July',
  'August',
  'September',
  'October',
  'November',
  'December',
];
const colorClasses = [
  'bg-red-500',
  'bg-yellow-500',
  'bg-green-500',
  'bg-gray-200',
];

export default function BigCalendar() {
  const { dailies } = useMyStore((state) => ({
    dailies: state.dailies,
  }));

  const today = new Date();
  const [currentDate, setCurrentDate] = useState(today);

  const getDaysInMonth = (date) =>
    new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();

  const getFirstDayOfMonth = (date) =>
    new Date(date.getFullYear(), date.getMonth(), 1).getDay();

  const getCompletionColor = (completion) => {
    if (completion === undefined) return colorClasses[3];
    if (completion === 100) return colorClasses[2];
    if (completion >= 70) return colorClasses[1];
    return colorClasses[0];
  };

  const getDailiesForCalendar = () =>
    dailies.reduce((acc, curr) => {
      const dailyDate = new Date(curr.date);
      if (!acc[dailyDate.toLocaleDateString()]) {
        acc[dailyDate.toLocaleDateString()] = [];
      }
      acc[dailyDate.toLocaleDateString()].push(curr);
      return acc;
    }, {});
  const dailiesForCalendar = getDailiesForCalendar();

  const renderCalendarDays = () => {
    const daysInMonth = getDaysInMonth(currentDate);
    const firstDayOfMonth = getFirstDayOfMonth(currentDate);
    const month = months[currentDate.getMonth()];
    const days = [];

    for (let i = 0; i < firstDayOfMonth; i += 1) {
      days.push(<div key={`empty-${i}`} className="h-16" />);
    }

    for (let day = 1; day <= daysInMonth; day += 1) {
      const dayDailies =
        dailiesForCalendar[
          `${currentDate.getMonth() + 1}/${day}/${currentDate.getFullYear()}`
        ];
      const completion = getCompletionPercentage(dayDailies);
      const colorClass = getCompletionColor(completion);

      days.push(
        <CalendarDay
          day={day}
          colorClass={colorClass}
          completion={completion}
          key={day}
          month={month}
          dailies={dayDailies}
        />,
      );
    }

    return days;
  };

  const changeMonth = (increment) => {
    setCurrentDate(
      (prevDate) =>
        new Date(prevDate.getFullYear(), prevDate.getMonth() + increment, 1),
    );
  };

  return (
    <div className="p-4">
      <div className="flex justify-between items-center mb-4">
        <Button onClick={() => changeMonth(-1)}>
          <Icon name="angle-left" />
        </Button>
        <h2 className="text-xl font-bold">
          {months[currentDate.getMonth()]} {currentDate.getFullYear()}
        </h2>
        {currentDate.toLocaleDateString() !== today.toLocaleDateString() ? (
          <Button variant="primary" onClick={() => setCurrentDate(today)}>
            Today
          </Button>
        ) : null}
        <Button onClick={() => changeMonth(1)}>
          <Icon name="angle-right" />
        </Button>
      </div>
      <div className="grid grid-cols-7 gap-1">
        {WEEK_OPTIONS.map((day) => (
          <div key={day} className="text-center font-bold">
            {day}
          </div>
        ))}
        {renderCalendarDays()}
      </div>
      <div className="mt-4 flex flex-col space-y-2">
        <h3 className="font-semibold">Legend:</h3>
        <div className="flex items-center">
          <div className="w-4 h-4 bg-red-500 mr-2" />
          <span>0% - 69% completed</span>
        </div>
        <div className="flex items-center">
          <div className="w-4 h-4 bg-yellow-500 mr-2" />
          <span>70% - 99% completed</span>
        </div>
        <div className="flex items-center">
          <div className="w-4 h-4 bg-green-500 mr-2" />
          <span>100% completed</span>
        </div>
        <div className="flex items-center">
          <div className="w-4 h-4 bg-gray-200 mr-2" />
          <span>No tasks</span>
        </div>
      </div>
    </div>
  );
}
